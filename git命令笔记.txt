初始化一个Git仓库，使用git init命令。

登录：
git config --global user.name "lethekk"
git config --global user.email "1312226181@qq.com"

进入仓库地址
cd f:Git/testgit

显示当前的目录
pwd


添加文件到Git仓库，分两步：

使用命令git add <file>，注意，可反复多次使用，添加多个文件；
使用命令git commit -m <message>，完成。

要随时掌握工作区的状态，使用git status命令。

如果git status告诉你有文件被修改过，用git diff可以查看修改内容。


HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git reset --hard commit_id。

例子
（1）git reset --hard 1094a 返回版本号为1094a
（2）git reset --hard HEAD^  上一个版本就是HEAD^，上上一个版本就是HEAD^^
（3）git reset --hard HEAD~100  当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100

穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。
 git log --pretty=oneline 如果嫌输出信息太多，看得眼花缭乱的，可以试试加上--pretty=oneline参数
 
要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。

cat readme.txt 显示文件内容

撤销修改:

场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。

命令git checkout -- readme.txt意思就是，把readme.txt文件在工作区的修改全部撤销，这里有两种情况：

一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；

一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。

总之，就是让这个文件回到最近一次git commit或git add时的状态。

场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD <file>，就回到了场景1，第二步按场景1操作。

$ git reset HEAD readme.txt

场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。


删除文件
rm test.txt  删除文件test.txt 

确认删除
$ git rm test.txt 从版本库中删除该文件
删错了，从版本库恢复（前提是之前被添加到版本库过）
$ git checkout -- test.txt

命令git rm用于删除一个文件。如果一个文件已经被提交到版本库，那么你永远不用担心误删，
但是要小心，你只能恢复文件到最新版本，你会丢失最近一次提交后你修改的内容。


--------创建SSH Key------------------------------------------------------
$ ssh-keygen -t rsa -C "1312226181@qq.com"
Generating public/private rsa key pair.
Enter file in which to save the key (/c/Users/鸡儿邦硬/.ssh/id_rsa):
Created directory '/c/Users/鸡儿邦硬/.ssh'.
Enter passphrase (empty for no passphrase):
Enter same passphrase again:
Your identification has been saved in /c/Users/鸡儿邦硬/.ssh/id_rsa.
Your public key has been saved in /c/Users/鸡儿邦硬/.ssh/id_rsa.pub.
The key fingerprint is:
SHA256:w6lfaZUa+LT+2AVsw9hJtvgMKEIWqrWBHCu2q540QT0 1312226181@qq.com
The key's randomart image is:
+---[RSA 2048]----+
| .  .            |
|..+. .           |
|o=+Eo       o    |
|+o.=.  . + O +   |
|.o. . . S * %    |
|  o  . o + @ o   |
| +    .   B o .  |
|o o    . + o .   |
|oo      . o.o    |
+----[SHA256]-----+


---结束-----------------------------------------------------


要关联一个远程库，使用命令git remote add origin git@server-name:path/repo-name.git；

例子:$ git remote add origin git@github.com:Jerry-KK/testgit.git

关联后，使用命令git push -u origin master第一次推送master分支的所有内容；


此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改；

分布式版本系统的最大好处之一是在本地工作完全不需要考虑远程库的存在，也就是有没有联网都可以正常工作，而SVN在没有联网的时候是拒绝干活的！当有网络的时候，再把本地提交推送一下就完成了同步，真是太方便了！



----------------分支管理---------------
1.创建与合并分支

$ git checkout -b dev
创建dev分支，相当于一下两条命令
$ git branch dev
$ git checkout dev

git branch命令查看当前分支
$ git branch

dev分支的工作完成，我们就可以切换回master分支
$ git checkout master

把dev分支的工作成果合并到master分支上
$ git merge dev

删除dev分支
$ git branch -d dev


小结
Git鼓励大量使用分支：

查看分支：git branch

创建分支：git branch <name>

切换分支：git checkout <name>

创建+切换分支：git checkout -b <name>

合并某分支到当前分支：git merge <name>

删除分支：git branch -d <name>


2.解决冲突

当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。

解决冲突就是把Git合并失败的文件手动编辑为我们希望的内容，再提交。

用git log --graph命令可以看到分支合并图

Git用<<<<<<<，=======，>>>>>>>标记出不同分支的内容
用带参数的git log也可以看到分支的合并情况
$ git log --graph --pretty=oneline --abbrev-commit


3.分支管理策略
Git分支十分强大，在团队开发中应该充分应用。

合并分支时，加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，
而fast forward合并就看不出来曾经做过合并。

合并dev分支，请注意--no-ff参数，表示禁用Fast forward
$ git merge --no-ff -m "merge with no-ff" dev

4.bug分支
修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除；

当手头工作没有完成时，先把工作现场git stash一下，然后去修复bug，修复后，再git stash pop，回到工作现场。

$ git stash保存工作现场
$ git stash list查看工作现场

Git把stash内容存在某个地方了，但是需要恢复一下，有两个办法：

一是用git stash apply恢复，但是恢复后，stash内容并不删除，你需要用git stash drop来删除；

另一种方式是用git stash pop，恢复的同时把stash内容也删了：

你可以多次stash，恢复的时候，先用git stash list查看，然后恢复指定的stash，用命令：

$ git stash apply stash@{0}

5.Feature分支
开发一个新feature，最好新建一个分支；

如果要丢弃一个没有被合并过的分支，可以通过git branch -D <name>强行删除。

6.多人协作

用git remote查看远程库的信息
$ git remote
origin

用git remote -v显示更详细的信息
$ git remote -v
origin  git@github.com:michaelliao/learngit.git (fetch)
origin  git@github.com:michaelliao/learngit.git (push)

当你从远程库clone时，默认情况下，你只能看到本地的master分支。
$ git branch
* master
现在，你要在dev分支上开发，就必须创建远程origin的dev分支到本地
$ git checkout -b dev origin/dev

$ git push origin dev
把dev分支push到远程

多人协作的工作模式通常是这样：

首先，可以试图用git push origin <branch-name>推送自己的修改；
$ git push origin dev
如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；
（
git pull也失败了，原因是没有指定本地dev分支与远程origin/dev分支的链接
$ git branch --set-upstream-to=origin/dev dev
Branch 'dev' set up to track remote branch 'dev' from 'origin'.
）
如果合并有冲突，则解决冲突，并在本地提交；

没有冲突或者解决掉冲突后，再用git push origin <branch-name>推送就能成功！

-----------分支管理学习结束-----------------------------


----------------标签：-------------
命令git tag <tagname>用于新建一个标签，默认为HEAD，也可以指定一个commit id；

命令git tag -a <tagname> -m "blablabla..."可以指定标签信息；

命令git tag可以查看所有标签。

可以用git show <tagname>查看标签信息


命令git push origin <tagname>可以推送一个本地标签；

命令git push origin --tags可以推送全部未推送过的本地标签；

命令git tag -d <tagname>可以删除一个本地标签；

命令git push origin :refs/tags/<tagname>可以删除一个远程标签。



忽略特殊文件：
在Git工作区的根目录下创建一个特殊的.gitignore文件（全名就是.gitignore）
忽略某些文件时，需要编写.gitignore；

.gitignore文件本身要放到版本库里，并且可以对.gitignore做版本管理！






